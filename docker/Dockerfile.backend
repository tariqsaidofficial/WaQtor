# Waqtor Backend Dockerfile
# Node.js backend with WhatsApp Web integration
# Based on Puppeteer Docker recommendations

FROM node:18-slim

# Install Chromium and dependencies for Puppeteer
# Note: Using Chromium instead of Chrome for ARM64 compatibility
RUN apt-get update \
    && apt-get install -y \
        chromium \
        chromium-sandbox \
        fonts-ipafont-gothic \
        fonts-wqy-zenhei \
        fonts-thai-tlwg \
        fonts-kacst \
        fonts-freefont-ttf \
        libxss1 \
        dumb-init \
        git \
        python3 \
        make \
        g++ \
        sqlite3 \
        libsqlite3-dev \
        --no-install-recommends \
    && rm -rf /var/lib/apt/lists/*

# Set Puppeteer environment variables
ENV PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true \
    PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium \
    NODE_ENV=development

# Create app directory
WORKDIR /app

# Copy package files only
COPY package*.json ./

# Install dependencies and rebuild native modules
RUN npm install && \
    npm rebuild sqlite3 --build-from-source

# Copy application files (excluding node_modules via .dockerignore)
COPY src ./src
COPY runtime ./runtime
COPY index.js ./
COPY shell.js ./
COPY index.d.ts ./ 
COPY .env.example ./

# Create necessary directories
RUN mkdir -p /app/.wwebjs_auth && \
    mkdir -p /app/.wwebjs_cache && \
    mkdir -p /app/runtime/logs && \
    mkdir -p /app/runtime/server/session && \
    mkdir -p /app/uploads

# Create cleanup script for Chrome lock files
RUN echo '#!/bin/sh\n\
# Clean up Chrome/Chromium lock files\n\
find /app/.wwebjs_auth -name "SingletonLock" -delete 2>/dev/null || true\n\
find /app/.wwebjs_auth -name "SingletonCookie" -delete 2>/dev/null || true\n\
find /app/.wwebjs_auth -name "SingletonSocket" -delete 2>/dev/null || true\n\
find /app/.wwebjs_cache -name "SingletonLock" -delete 2>/dev/null || true\n\
find /app/.wwebjs_cache -name "SingletonCookie" -delete 2>/dev/null || true\n\
find /app/.wwebjs_cache -name "SingletonSocket" -delete 2>/dev/null || true\n\
# Start the application\n\
exec "$@"\n\
' > /app/docker-entrypoint.sh && chmod +x /app/docker-entrypoint.sh

# Add user so we don't need --no-sandbox
# Same layer as npm install to keep re-chowned files from using up several hundred MBs more space
RUN groupadd -r pptruser && useradd -r -g pptruser -G audio,video pptruser \
    && mkdir -p /home/pptruser/Downloads \
    && chown -R pptruser:pptruser /home/pptruser \
    && chown -R pptruser:pptruser /app

# Run everything after as non-privileged user
USER pptruser

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD node -e "require('http').get('http://localhost:8080/health', (r) => { process.exit(r.statusCode === 200 ? 0 : 1); })"

# Use dumb-init to handle signals properly and reap zombie processes
ENTRYPOINT ["dumb-init", "--", "/app/docker-entrypoint.sh"]

# Start application
CMD ["npm", "run", "dev"]
